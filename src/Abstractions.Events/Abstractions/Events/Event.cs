// ------------------------------------------------------------------------------
// <auto-generated>
//    Generated by avrogen, version 1.10.0.0
//    Changes to this file may cause incorrect behavior and will be lost if code
//    is regenerated
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Abstractions.Events
{
	using System;
	using System.Collections.Generic;
	using System.Text;
	using Avro;
	using Avro.Specific;
	
	public partial class Event : ISpecificRecord
	{
		public static Schema _SCHEMA = Avro.Schema.Parse(@"{""type"":""record"",""name"":""Event"",""namespace"":""Abstractions.Events"",""fields"":[{""name"":""Name"",""doc"":""The name that uniquely identifies this event"",""default"":""NULL"",""type"":""string""},{""name"":""AggregateName"",""doc"":""The group/aggregate this event belongs to"",""default"":""NULL"",""type"":""string""},{""name"":""CreatedAt"",""doc"":""The UTC timestamp (in milliseconds) when this event was created"",""default"":0,""type"":""long""},{""name"":""Payload"",""doc"":""The optional payload data of this event"",""type"":[""null"",{""type"":""record"",""name"":""EventPayload"",""namespace"":""Abstractions.Events"",""fields"":[{""name"":""DataSchema"",""doc"":""The schema of the value in the 'Data' field"",""default"":""NULL"",""type"":""string""},{""name"":""Data"",""doc"":""The data of this payload"",""default"":""\u0000"",""type"":""bytes""}]}]}]}");
		/// <summary>
		/// The name that uniquely identifies this event
		/// </summary>
		private string _Name;
		/// <summary>
		/// The group/aggregate this event belongs to
		/// </summary>
		private string _AggregateName;
		/// <summary>
		/// The UTC timestamp (in milliseconds) when this event was created
		/// </summary>
		private long _CreatedAt;
		/// <summary>
		/// The optional payload data of this event
		/// </summary>
		private Abstractions.Events.EventPayload _Payload;
		public virtual Schema Schema
		{
			get
			{
				return Event._SCHEMA;
			}
		}
		/// <summary>
		/// The name that uniquely identifies this event
		/// </summary>
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				this._Name = value;
			}
		}
		/// <summary>
		/// The group/aggregate this event belongs to
		/// </summary>
		public string AggregateName
		{
			get
			{
				return this._AggregateName;
			}
			set
			{
				this._AggregateName = value;
			}
		}
		/// <summary>
		/// The UTC timestamp (in milliseconds) when this event was created
		/// </summary>
		public long CreatedAt
		{
			get
			{
				return this._CreatedAt;
			}
			set
			{
				this._CreatedAt = value;
			}
		}
		/// <summary>
		/// The optional payload data of this event
		/// </summary>
		public Abstractions.Events.EventPayload Payload
		{
			get
			{
				return this._Payload;
			}
			set
			{
				this._Payload = value;
			}
		}
		public virtual object Get(int fieldPos)
		{
			switch (fieldPos)
			{
			case 0: return this.Name;
			case 1: return this.AggregateName;
			case 2: return this.CreatedAt;
			case 3: return this.Payload;
			default: throw new AvroRuntimeException("Bad index " + fieldPos + " in Get()");
			};
		}
		public virtual void Put(int fieldPos, object fieldValue)
		{
			switch (fieldPos)
			{
			case 0: this.Name = (System.String)fieldValue; break;
			case 1: this.AggregateName = (System.String)fieldValue; break;
			case 2: this.CreatedAt = (System.Int64)fieldValue; break;
			case 3: this.Payload = (Abstractions.Events.EventPayload)fieldValue; break;
			default: throw new AvroRuntimeException("Bad index " + fieldPos + " in Put()");
			};
		}
	}
}
